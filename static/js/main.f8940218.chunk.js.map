{"version":3,"sources":["types/Auth/Requests/RegisterCommand.ts","consts/Routes.ts","api/AuthApi.ts","stores/entities/SessionEntity.ts","stores/AuthStore.ts","pages/Registration.tsx","pages/Main.tsx","types/Auth/Requests/VerifyEmailCommand.ts","pages/Verification.tsx","types/Auth/Requests/LoginCommand.ts","components/LoginForm/LoginForm.tsx","components/App/App.tsx","index.tsx"],"names":["RegisterCommand","phoneNumber","email","displayName","password","verificationMethod","termsAccepted","this","ApiRoute","apiDomain","process","AuthRoutes","postRegister","postLogin","postRefreshToken","getVerifyPhone","verifyEmail","ChatsRoutes","getChats","createNewGroup","postGroup","postDirectChat","postJoinGroup","getChatsByName","MessagesRoutes","getChatMessages","postMessage","putMessage","deleteMessage","UserRoutes","getUserById","addUserById","getUsers","ContactsRoutes","deleteContact","getContactList","AuthApi","headers","apiConnector","axios","create","baseURL","data","post","res","Promise","resolve","response","errorText","status","console","log","reject","userId","refreshTokenId","DefaultSessionEntity","session","setAccessToken","accessToken","setRefreshToken","_accessToken","_refreshTokenId","observable","action","value","computed","AuthStore","registrationApi","makeAutoObservable","register","setMessage","message","setSuccess","success","setUserId","login","_session","_message","_success","_userId","localStorage","setItem","Registration","observer","authStore","React","setPhoneNumber","setEmail","name","setName","setPassword","setTermsAccepted","setVerificationMethod","FormContainer","onSubmit","event","preventDefault","registration","FormWrapper","InputFormWrapper","InputWrapper","type","onChange","target","placeholder","style","margin","SelectWrapper","SubmitButton","styled","Main","Wrapper","Body","Form","FormWindow","FormHeader","FormHeaderH1","FormContent","FormLabel","FormInput","FormGroup","FormRemember","CheckBox","FormRecovery","FormFogot","Knopka","FormToggle","AtBut","Icon","Footer","Container","VerifyEmailCommand","Verification","getItem","LoginCommand","LoginForm","App","className","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8940218.chunk.js","sourcesContent":["import {VerificationMethod} from \"../Enums/VerificationMethod\";\n\nexport class RegisterCommand {\n  phoneNumber: string;\n  email: string;\n  displayName: string;\n  password: string;\n  verificationMethod: VerificationMethod;\n  termsAccepted: boolean;\n\n\n  constructor(phoneNumber: string,\n              email: string,\n              displayName: string,\n              password: string,\n              verificationMethod: VerificationMethod,\n              termsAccepted: boolean) {\n    this.phoneNumber = phoneNumber;\n    this.email = email;\n    this.displayName = displayName;\n    this.password = password;\n    this.verificationMethod = verificationMethod;\n    this.termsAccepted = termsAccepted;\n  }\n}\n","export class ApiRoute {\n    static apiDomain = process.env.REACT_APP_API_BASEURL\n}\n\nexport class AuthRoutes {\n    static postRegister = \"/api/auth/register\"\n    static postLogin = \"/api/sessions\"\n    static postRefreshToken = \"/api/auth/refresh-token\"\n    static getVerifyPhone = \"/api/auth/verify-phone\"\n    static verifyEmail = \"/api/auth/verify-email\"\n}\n\nexport class ChatsRoutes {\n    static getChats = \"/api/chats\"\n    static createNewGroup = \"/api/chats\"\n    static postGroup = \"/api/chats/group\"\n    static postDirectChat = \"/api/chats/direct-chat\"\n    static postJoinGroup = \"/api/chats/group/join/{chatId}\"\n    static getChatsByName = \"/api/chats/searches\"\n}\n\nexport class MessagesRoutes {\n    static getChatMessages = \"/api/messages/{chatId}\"\n    static postMessage = \"/api/messages\"\n    static putMessage = \"/api/messages\"\n    static deleteMessage = \"/api/messages/{messageId}\"\n}\n\nexport class UserRoutes {\n    static getUserById = \"/api/users/{userId}\"\n    static addUserById = \"/api/contacts/{contactId}\"\n    static getUsers = \"/api/users\"\n}\n\nexport class ContactsRoutes {\n\n    static deleteContact = \"/api/contacts/{contactId}\"\n    static getContactList = \"api/contacts\"\n}\n","import axios, {AxiosInstance} from \"axios\"\nimport {ApiRoute, AuthRoutes} from \"../consts/Routes\"\nimport {RegisterCommand} from \"../types/Auth/Requests/RegisterCommand\"\nimport {LoginCommand} from \"../types/Auth/Requests/LoginCommand\"\nimport {RefreshTokenCommand} from \"../types/Auth/Requests/RefreshTokenCommand\"\nimport {VerifyEmailCommand} from \"../types/Auth/Requests/VerifyEmailCommand\"\nimport {IBaseResponse} from \"../types/IBaseResponse\"\nimport {IRegisterResponse} from \"../types/Auth/Responses/IRegisterResponse\"\nimport {ILoginResponse} from \"../types/Auth/Responses/ILoginResponse\"\n\nexport class AuthApi {\n    protected headers: {\n        \"Content-Type\": \"application/json\"\n    } = {\n        \"Content-Type\": \"application/json\",\n    }\n\n\n    protected apiConnector: AxiosInstance\n\n    public constructor() {\n        this.apiConnector = axios.create({headers: this.headers, baseURL: ApiRoute.apiDomain})\n    }\n\n    public async register(data: RegisterCommand) {\n        try {\n\n            const res: {data: IRegisterResponse} = await this.apiConnector.post(\n                AuthRoutes.postRegister,\n                {\n                    phoneNumber: data.phoneNumber,\n                    email: data.email,\n                    displayName: data.displayName,\n                    password: data.password,\n                    verificationMethod: data.verificationMethod,\n                    termsAccepted: data.termsAccepted,\n                },\n                {headers: this.headers},\n            )\n\n            return Promise.resolve(res.data)\n        } catch (error) {\n            if (error && error.response) {\n                let errorText = \"\"\n                switch (error.response.status) {\n                    case 400:\n                        errorText = \"Bad Request\"\n                        break\n                    case 401:\n                        errorText = \"Wrong login or password\"\n                        break\n                    case 403:\n                        errorText = \"Access denied\"\n                        break\n                    case 409:\n                        errorText = \"Conflict\"\n                        break\n                    default:\n                        errorText = error.response.status\n                        break\n                }\n                console.log(\"One of the Error messages from Register Request: \", errorText)\n            }\n\n            return Promise.reject(error)\n        }\n    }\n\n    public async login(data: LoginCommand) {\n        try {\n            const res: {data: ILoginResponse} = await this.apiConnector.post(\n                AuthRoutes.postLogin,\n                {\n                    email: data.email,\n                    password: data.password,\n                },\n                {headers: this.headers},\n            )\n            return Promise.resolve(res.data)\n        } catch (error) {\n            if (error && error.response) {\n                let errorText = \"\"\n                switch (error.response.status) {\n                    case 401:\n                        errorText = \"Wrong login or password\"\n                        break\n                    case 403:\n                        errorText = \"Access denied\"\n                        break\n                    default:\n                        errorText = error.response.status\n                        break\n                }\n                console.log(\"One of the Error messages from Register Request: \", errorText)\n            }\n            return Promise.reject(error)\n        }\n    }\n\n    public async verifyEmail(data: VerifyEmailCommand) {\n\n        try {\n            const res: {data: IBaseResponse} = await this.apiConnector.post(AuthRoutes.verifyEmail, {email: data.email, userId: data.userId}, {headers: this.headers})\n            return Promise.resolve(res.data)\n        } catch (error) {\n\n            if (error && error.response) {\n                let errorText = \"\"\n                switch (error.response.status) {\n                    case 401:\n                        errorText = \"Wrong login or password\"\n                        break\n                    case 403:\n                        errorText = \"Access denied\"\n                        break\n                    default:\n                        errorText = error.response.status\n                        break\n                }\n                console.log(\"One of the Error messages from Register Request: \", errorText)\n            }\n\n            return Promise.reject(error)\n        }\n\n\n    }\n\n    public async verifyPhone(data: any) {\n    }\n\n    public async refreshToken(data: RefreshTokenCommand) {\n        try {\n            // eslint-disable-next-line\n            const res: {data: string} = await this.apiConnector.post(AuthRoutes.postRefreshToken, {refreshTokenId: data.refreshTokenId}, {headers: this.headers})\n\n            return Promise.resolve()\n        } catch (error) {\n            if (error && error.response) {\n                let errorText = \"\"\n                switch (error.response.status) {\n                    case 401:\n                        errorText = \"Wrong login or password\"\n                        break\n                    case 403:\n                        errorText = \"Access denied\"\n                        break\n                    default:\n                        errorText = error.response.status\n                        break\n                }\n                console.log(\"One of the Error messages from Register Request: \", errorText)\n            }\n            return Promise.reject(error)\n        }\n    }\n\n    public async logout(data: any) {\n    }\n\n    public async logoutAll(data: any) {\n    }\n}\n","import {action, computed, observable} from \"mobx\"\n\nexport interface DefaultSession {\n    refreshTokenId: string | null\n    accessToken: string | null\n}\n\nexport class DefaultSessionEntity {\n    @observable\n    protected _refreshTokenId: string | null = null\n\n    @observable\n    protected _accessToken: string | null = null\n\n    @action\n    private setAccessToken = (value: string | null) => {\n        this._accessToken = value\n    }\n\n    @action\n    private setRefreshToken = (value: string | null) => {\n        this._refreshTokenId = value\n    }\n\n\n    public constructor(session: DefaultSession) {\n        this.setAccessToken(session.accessToken)\n        this.setRefreshToken(session.refreshTokenId)\n    }\n\n    @computed\n    public get accessToken() {\n        return this._accessToken\n    }\n\n    @computed\n    public get refreshToken() {\n        return this._refreshTokenId\n    }\n\n\n}\n","import {action, makeAutoObservable, observable} from \"mobx\"\nimport {AuthApi} from \"../api/AuthApi\"\nimport {RegisterCommand} from \"../types/Auth/Requests/RegisterCommand\"\nimport {LoginCommand} from \"../types/Auth/Requests/LoginCommand\"\nimport {VerifyEmailCommand} from \"../types/Auth/Requests/VerifyEmailCommand\"\nimport {IBaseResponse} from \"../types/IBaseResponse\"\nimport {IRegisterResponse} from \"../types/Auth/Responses/IRegisterResponse\"\nimport {DefaultSessionEntity, DefaultSession} from \"./entities/SessionEntity\"\n\nexport class AuthStore {\n    private registrationApi = new AuthApi()\n\n    @observable\n    private _message: String | null = null\n\n    @observable\n    private _success: Boolean = false\n\n    @observable\n    private _userId: String | null = null\n\n    @observable\n    private _login: String | null = null\n\n    @observable\n    private _isLogged: boolean = false\n\n    @observable\n    private _session: DefaultSessionEntity | null = null\n\n    @action\n    public setMessage = (message: string) => {\n        this._message = message\n    }\n\n    @action\n    public setSuccess = (success: boolean) => {\n        this._success = success\n    }\n\n    @action\n    public setUserId = (userId: string) => {\n        this._userId = userId\n        localStorage.setItem(\"userId\", userId)\n    }\n\n    public async registration(data: RegisterCommand) {\n        try {\n            const res: IRegisterResponse = await this.registrationApi.register(data)\n            this.setMessage(res.message)\n            this.setSuccess(res.success)\n            this.setUserId(res.userId)\n            return Promise.resolve()\n        } catch (error) {\n            return Promise.reject(error)\n        }\n    }\n\n    public async verifyEmail(data: VerifyEmailCommand) {\n        try {\n            const res: IBaseResponse = await this.registrationApi.verifyEmail(data)\n            this.setMessage(res.message)\n            this.setSuccess(res.success)\n\n            return Promise.resolve()\n\n        } catch (error) {\n            return Promise.reject(error)\n        }\n    }\n\n    public async login(data: LoginCommand) {\n\n        try {\n            const session: DefaultSession = await this.registrationApi.login(data)\n            this._session = new DefaultSessionEntity(session)\n            return Promise.resolve()\n        } catch (error) {\n            return Promise.reject(error)\n        }\n\n    }\n\n\n    public constructor() {\n        makeAutoObservable(this)\n\n    }\n}\n","import * as React from \"react\"\nimport {observer} from \"mobx-react-lite\"\n\nimport styled from \"styled-components\"\nimport {VerificationMethod} from \"../types/Auth/Enums/VerificationMethod\"\nimport {RegisterCommand} from \"../types/Auth/Requests/RegisterCommand\"\nimport {AuthStore} from \"../stores/AuthStore\"\n\n\nexport const Registration: React.FunctionComponent = observer(() => {\n    const authStore = new AuthStore()\n\n\n    const [phoneNumber, setPhoneNumber] = React.useState(\"\")\n    const [email, setEmail] = React.useState(\"\")\n    const [name, setName] = React.useState(\"\")\n    const [password, setPassword] = React.useState(\"\")\n    const [termsAccepted, setTermsAccepted] = React.useState(true)\n    const [verificationMethod, setVerificationMethod] = React.useState<VerificationMethod>(1)\n\n    const handleFormSubmit = (event: any) => {\n        event.preventDefault()\n        setTermsAccepted(true)\n        authStore.registration(new RegisterCommand(phoneNumber, email, name, password, verificationMethod, termsAccepted))\n\n    }\n\n    const handleSelectChange = (event: any) => {\n        if (event.target.value === \"phone\") {\n            setVerificationMethod(1)\n        } else if (event.target.value === \"email\") {\n            setVerificationMethod(2)\n        }\n\n    }\n\n\n    return (\n\n        <FormContainer onSubmit={handleFormSubmit}>\n            <FormWrapper>\n                <InputFormWrapper>\n                    <label>\n                        Phone Number:\n                        <InputWrapper type=\"text\" value={phoneNumber} onChange={(event) => setPhoneNumber(event.target.value)} placeholder={\"Enter your phone number\"} />\n                    </label>\n                </InputFormWrapper>\n\n                <InputFormWrapper>\n                    <label>\n                        Email:\n                        <InputWrapper type=\"e-mail\" value={email} onChange={(event) => setEmail(event.target.value)} placeholder={\"Enter your E-MAIL\"} />\n                    </label>\n                </InputFormWrapper>\n\n                <InputFormWrapper>\n                    <label>\n                        Name:\n                        <InputWrapper type=\"text\" value={name} onChange={(event) => setName(event.target.value)} placeholder={\"Enter your name\"} />\n                    </label>\n                </InputFormWrapper>\n\n                <InputFormWrapper>\n                    <label>\n                        Password:\n                        <InputWrapper type=\"password\" value={password} onChange={(event) => setPassword(event.target.value)} placeholder={\"Enter your password\"} />\n                    </label>\n                </InputFormWrapper>\n\n\n                <label style={{margin: \"0 0 15px 0\"}}>\n                    Authorization method:\n\n                    <SelectWrapper onChange={handleSelectChange}>\n                        <option value=\"phone\">Phone number</option>\n                        <option value=\"email\">E-Mail</option>\n                    </SelectWrapper>\n\n                </label>\n\n\n                <label>\n                    By clicking submit you are agreeing to the Terms and Conditions.\n                    <SubmitButton type=\"submit\" value=\"submit\" />\n                </label>\n            </FormWrapper>\n\n\n        </FormContainer>\n\n\n    )\n})\n\n\nconst FormContainer = styled(\"div\")`\n  height: 100vh;\n  width: 100vw;\n  font-family: 'Open Sans',sans-serif;\n  color: black;\n  background: linear-gradient(#6bff18, #FF1493);\n  display: flex;\n  justify-content: center;\n`\n\nexport const FormWrapper = styled(\"form\")`\n    width: 400px;\n    height: fit-content;\n    padding: 40px;\n    background: black;\n    background: #181a1b;\n    box-sizing: border-box;\n    box-shadow: 0 15px 25px rgba(0,0,0,.6);\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n`\n\nexport const InputFormWrapper = styled(\"div\")`\n  width: 100%;\n  padding: 10px 0;\n  font-size: 16px;\n  color: #FF1493;\n  margin-bottom: 30px;\n  border: none;\n  outline: none;\n  background: transparent;\n`\nexport const InputWrapper = styled(\"input\")`\n  width: 100%;\n  padding: 10px 0;\n  font-size: 16px;\n  color: #fff;\n  margin-bottom: 30px;\n  border: none;\n  border-bottom: 1px solid #fff;\n  outline: none;\n  background: transparent;\n`\n\nconst SubmitButton = styled(\"input\")`\n    background: linear-gradient(#243B6B, #8951e9);\n    width: 100%;\n    height: 8.5%;\n    padding: 10px 20px;\n    color: #f1ecf2;\n    font-size: 16px;\n    text-decoration: none;\n    text-transform: uppercase;\n    overflow: hidden;\n    transition: 0.6s;\n    cursor: pointer;\n    margin-top: 40px;\n    letter-spacing: 2px;\n    border: 2px solid;\n  &:hover {\n    background: #243b55;\n    color: #fff;\n    border-radius: 5px;\n  }\n`\n\nconst SelectWrapper = styled(\"select\")`\n    padding: 5px;\n    width: 100%;\n    cursor: pointer;\n    border-radius: 5px;\n    background-color: #ddd;\n`\nexport const BodyBox = styled(\"input\")`\n  background: linear-gradient(45deg, rgba(66, 183, 245, 0.8) 0%, rgba(66, 245, 189, 0.4) 100%);\n  color: rgba(0, 0, 0, 0.6);\n`\nexport const Container = styled(\"div\")`\n    display: flex;\n    flex-direction: column;\n  `\n","import * as React from \"react\"\nimport styled from \"styled-components\"\n\nexport const Main: React.FunctionComponent = () => {\n\n    return (\n        <Container>\n            <Wrapper>\n             <Body>\n              <Form>\n               <FormWindow>\n                <FormHeader>\n                <FormHeaderH1>Account Login</FormHeaderH1>\n                </FormHeader>\n                    <FormContent>\n                        <FormLabel>Username</FormLabel>\n                    </FormContent>\n                   <FormInput></FormInput>\n                   <FormGroup>\n                   <FormContent>\n                       <FormLabel>Password</FormLabel>\n                   </FormContent>\n                       <FormInput></FormInput>\n                   </FormGroup>\n                   <FormGroup>\n                       <FormRemember>\n                           <CheckBox></CheckBox>\n                           Remember Me </FormRemember>\n                       <FormRecovery>\n                           <FormFogot>Forgot Password?</FormFogot>\n                       </FormRecovery>\n                   </FormGroup>\n                   <FormGroup>\n                      <Knopka>LOG IN</Knopka>\n                   </FormGroup>\n                   <FormToggle></FormToggle>\n               </FormWindow>\n              </Form>\n                 <AtBut>\n                     <Icon></Icon>\n                 </AtBut>\n                 <Footer></Footer>\n             </Body>\n            </Wrapper>\n        </Container>\n\n\n    )\n}\n\n\nconst Icon = styled(\"i\")`\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -moz-font-feature-settings: 'liga'\n`\n\nconst AtBut = styled(\"a\")`\n  z-index: 10000000;\n  position: fixed;\n  right: 24px;\n  bottom: 24px;\n  background: #FFF;\n  width: 48px;\n  height: 48px;\n  padding: 12px;\n  border-radius: 100%;\n  box-sizing: border-box;\n  color: #666;\n  -webkit-animation: at-ripple 0.6s linear infinite;\n  animation: at-ripple 0.6s linear infinite;\n`\n\nconst Knopka = styled(\"button\")`\n  outline: none;\n  background: #4285F4;\n  width: 100%;\n  border: 0;\n  border-radius: 4px;\n  padding: 12px 20px;\n  color: #FFFFFF;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: 500;\n  line-height: inherit;\n  text-transform: uppercase;\n  cursor: pointer;\n`\n\nconst FormFogot = styled(\"a\")`\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  font-size: inherit;\n  vertical-align: baseline;\n`\n\nconst FormRecovery = styled(\"div\")`\n  color: #4285F4;\n  font-size: 12px;\n  text-decoration: none;\n`\n\nconst CheckBox = styled(\"input\")`\n  display: inline-block;\n  width: 8px;\n  height: 10px;\n  margin: 0 10px 0 0;\n`\n\nconst FormRemember = styled(\"label\")`\n  font-size: 12px;\n  font-weight: 400;\n  letter-spacing: 0;\n  text-transform: none;\n`\nconst FormInput = styled(\"input\")`\n  outline: none;\n  display: block;\n  background: rgba(0, 0, 0, 0.1);\n  width: 100%;\n  border: 0;\n  border-radius: 4px;\n  box-sizing: border-box;\n  padding: 12px 20px;\n  color: rgba(0, 0, 0, 0.6);\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: 500;\n  line-height: inherit;\n  transition: 0.3s ease;\n`\n\n\n\nconst FormLabel = styled(\"label\")`\n  display: block;\n  margin: 0 0 10px;\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 1;\n  text-transform: uppercase;\n  letter-spacing: 0.2em;\n`\n\nconst FormContent = styled(\"div\")`\n  margin: 10px 0px 0px 0px;\n  padding: 0px;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline\n  flex: 1 0 auto;\n`\n\nconst FormHeader = styled(\"div\")`\n  margin: 0 0 40px;\n  flex: 0 0 auto;\n`\nconst FormHeaderH1 = styled(\"h1\")`\n  padding: 4px 0;\n  color: #4285F4;\n  font-size: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  `\nconst FormToggle = styled(\"div\") `\n    z-index: 10;\n    position: absolute;\n    top: 60px;\n    right: 60px;\n    background: green;\n    width: 60px;\n    height: 60px;\n    border-radius: 100%;\n    transform-origin: center;\n    transform: translate(0, -25%) scale(0);\n    opacity: 0;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    &:after, before{\n     content: \"\";\n     display: block;\n     position: absolute;\n     top: 50%;\n     left: 50%;\n     width: 30px;\n     height: 4px;\n     background: #4285F4;\n     transform: translate(-50%, -50%);\n   }\n`\nconst Form = styled(\"div\") `\n  z-index: 15;\n  position: relative;\n  background: #FFFFFF;\n  width: 600px;\n  border-radius: 4px;\n  box-shadow: 0 0 30px rgba(0, 0, 0, 0.1);\n  box-sizing: border-box;\n  margin: 100px auto 10px;\n  overflow: hidden;\n`\n\nconst Container = styled(\"div\")`\n    display: flex;\n    flex-direction: column;\n  height: 100%;\n`\nconst Body = styled(\"body\") `\n    background: linear-gradient(45deg, rgba(66, 183, 245, 0.8) 0%, rgba(66, 245, 189, 0.4) 100%);\n    color: rgba(0, 0, 0, 0.6);\n    font-family: \"Roboto\", sans-serif;\n    font-size: 14px;\n    line-height: 1.6em;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n`\n\nconst Footer = styled(\"div\")`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 600px;\n  margin: 5.11%;\n  flex: 0 0 auto;\n`\nconst Wrapper = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n`\n\nconst FormWindow = styled(\"div\") `\npadding: 60px calc(5% + 60px) 60px 60px;\n    box-sizing: border-box;\n    `\nconst FormGroup = styled(\"div\")`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 0 0 20px;\n    &:last-child{\n    margin: 0;\n  }\n`\n","export class VerifyEmailCommand {\n    email: string\n    userId: string\n\n    constructor(email: string, userId: string) {\n        this.email = email\n        this.userId = userId\n    }\n}\n","import * as React from \"react\"\nimport {observer} from \"mobx-react\"\nimport {FormWrapper, InputFormWrapper, InputWrapper} from \"./Registration\"\nimport {AuthStore} from \"../stores/AuthStore\"\nimport {VerifyEmailCommand} from \"../types/Auth/Requests/VerifyEmailCommand\"\n\nexport const Verification: React.FunctionComponent = observer(() => {\n\n    const [email, setEmail] = React.useState(\"\")\n\n    const authStore = new AuthStore()\n    const userId = localStorage.getItem(\"userId\") || \"\"\n\n    const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        authStore.verifyEmail(new VerifyEmailCommand(email, userId))\n\n    }\n\n    return (\n        <FormWrapper onSubmit={handleFormSubmit}>\n            <InputFormWrapper>\n                <label>\n                    Please enter your E-MAIL\n                    <InputWrapper value={email} type=\"text\" onChange={(event) => setEmail(event.target.value)} />\n\n                </label>\n                <input type=\"submit\"/>\n            </InputFormWrapper>\n        </FormWrapper>\n    )\n})\n","export class LoginCommand {\n    email: string\n    password: string\n\n    constructor(email: string, password: string) {\n        this.email = email\n        this.password = password\n    }\n\n}\n","import * as React from \"react\"\nimport {FormWrapper, InputFormWrapper, InputWrapper} from \"../../pages/Registration\"\nimport styled from \"styled-components\"\nimport {AuthStore} from \"../../stores/AuthStore\"\nimport {LoginCommand} from \"../../types/Auth/Requests/LoginCommand\"\n\n\nexport const LoginForm: React.FunctionComponent = () => {\n\n    const authStore = new AuthStore()\n\n    const [email, setEmail] = React.useState(\"\")\n    const [password, setPassword] = React.useState(\"\")\n\n    const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n\n        authStore.login(new LoginCommand(email, password))\n        //window.location.reload()\n    }\n\n    return (\n<div>\n        <FormWrapper onSubmit={handleFormSubmit}>\n\n            <InputFormWrapper>\n                <label>\n                    Enter your E-MAIL\n                    <InputWrapper value={email} type=\"text\" onChange={(event) => {\n                        setEmail(event.target.value)\n                    }} />\n                </label>\n            </InputFormWrapper>\n\n            <InputFormWrapper>\n                <label>\n                    Enter your password\n                    <InputWrapper value={password} type=\"password\" onChange={(event) => {\n                        setPassword(event.target.value)\n                    }} />\n                </label>\n            </InputFormWrapper>\n\n\n            <SubmitButton type=\"submit\" value=\"LOG IN\" />\n        </FormWrapper>\n</div>\n\n    )\n\n\n}\n\nconst SubmitButton = styled(\"input\")`\n   /* background: rgb(9, 67, 162);\n    width: 100%;\n    height: 8.5%;\n    padding: 10px 20px;\n    color: #f1ecf2;\n    font-size: 16px;\n    text-decoration: none;\n    text-transform: uppercase;\n    overflow: hidden;\n    transition: 0.6s;\n    cursor: pointer;\n    margin-top: 40px;\n    letter-spacing: 2px;\n    border: 2px solid;\n    &:hover {\n    background: #243b55;\n    color: white;\n    border-radius: 5px;*/\n  \n  outline: none;\n  background: #4285F4;\n  width: 100%;\n  border: 0;\n  border-radius: 4px;\n  padding: 12px 20px;\n  color: #FFFFFF;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: 500;\n  line-height: inherit;\n  text-transform: uppercase;\n  cursor: pointer;\n    }\n{`\n\n\n","import React from \"react\"\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport {Registration} from \"../../pages/Registration\"\nimport {Main} from \"../../pages/Main\"\nimport {Verification} from \"../../pages/Verification\"\nimport {LoginForm} from \"../LoginForm/LoginForm\"\n\n\nexport default function App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path=\"/main\" component={Main} />\n                    <Route exact path=\"/registration\" component={Registration} />\n                    <Route exact path=\"/verification\" component={Verification} />\n                    {/*TODO: DELETE LOGIN TEST COMP TASK */}\n                    <Route exact path=\"/login-test\" component={LoginForm} />\n\n                </Switch>\n            </BrowserRouter>\n\n        </div>\n    )\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./assets/index.css\"\nimport {BrowserRouter} from \"react-router-dom\"\nimport App from \"./components/App/App\"\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\"),\n)\n\n\n"],"sourceRoot":""}