{"version":3,"sources":["components/Toolbar/Toolbar.tsx","components/ToolbarButton/ToolbarButton.tsx","components/ConversationSearch/ConversationSearch.tsx","components/ConversationListItem/ConversationListItem.tsx","components/ConversationList/ConversationsList.tsx","components/Message/Message.tsx","components/Compose/Compose.tsx","components/MessageList/MessageList.tsx","components/Messenger/Messenger.tsx","consts/Routes.ts","api/AuthApi.ts","stores/AuthStore.ts","types/Auth/Requests/RegisterCommand.ts","pages/Registration/Registration.tsx","components/App/App.tsx","index.tsx"],"names":["Toolbar","props","title","leftItems","rightItems","className","ToolbarButton","icon","ConversationSearch","type","placeholder","ConversationListItem","useEffect","shave","data","photo","name","text","src","alt","ConversationsList","useState","conversations","setConversations","getConversations","axios","get","then","response","newConversations","results","map","result","picture","large","first","last","conversation","Message","isMine","startsSequence","endsSequence","showTimestamp","friendlyTimestamp","moment","timestamp","format","join","message","Compose","MessageList","messages","setMessages","getMessages","tempMessages","id","author","Date","getTime","i","messageCount","length","previous","current","next","currentMoment","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","renderMessages","Messenger","ApiRoute","apiDomain","process","AuthRoutes","postRegister","postLogin","postRefreshToken","getVerifyPhone","ChatsRoutes","getChats","postGroup","postDirectChat","postJoinGroup","MessagesRoutes","getChatMessages","postMessage","putMessage","deleteMessage","AuthApi","headers","apiConnector","this","create","baseURL","post","phoneNumber","email","displayName","password","verificationMethod","termsAccepted","res","Promise","resolve","errorText","status","console","log","reject","refreshTokenId","AuthStore","registrationApi","makeAutoObservable","register","success","userId","setMessage","setSuccess","setUserId","observable","action","_message","_success","_userId","RegisterCommand","Registration","observer","authStore","React","setPhoneNumber","setEmail","setName","setPassword","setTermsAccepted","setVerificationMethod","FormContainer","onSubmit","event","preventDefault","registration","FormWrapper","InputFormWrapper","InputWrapper","value","onChange","target","SubmitButton","styled","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af8509f3.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Toolbar.css\"\n\nexport const Toolbar = (props: any) => {\n    const {title, leftItems, rightItems} = props\n    return (\n        <div className=\"toolbar\">\n            <div className=\"left-items\">{leftItems}</div>\n            <h1 className=\"toolbar-title\">{title}</h1>\n            <div className=\"right-items\">{rightItems}</div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport \"./ToolbarButton.css\";\n\n// @ts-ignore\nexport const ToolbarButton = ({ icon }) => {\n  \n  return <i className={`toolbar-button ${icon}`} />;\n};\n","import React from \"react\";\nimport \"./ConversationSearch.css\";\n\nexport const ConversationSearch = () => {\n  return (\n    <div className=\"conversation-search\">\n      <input\n        type=\"search\"\n        className=\"conversation-search-input\"\n        placeholder=\"Search Messages\"\n      />\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport shave from \"shave\";\n\nimport \"./ConversationListItem.css\";\n\nexport const ConversationListItem = (props: any) => {\n  useEffect(() => {\n    shave(\".conversation-snippet\", 20);\n  });\n\n  const { photo, name, text } = props.data;\n\n  return (\n    <div className=\"conversation-list-item\">\n      <img className=\"conversation-photo\" src={photo} alt=\"conversation\" />\n      <div className=\"conversation-info\">\n        <h1 className=\"conversation-title\">{name}</h1>\n        <p className=\"conversation-snippet\">{text}</p>\n      </div>\n    </div>\n  );\n};\n","import React, {useEffect, useState} from \"react\"\nimport {Toolbar} from \"../Toolbar/Toolbar\"\nimport {ToolbarButton} from \"../ToolbarButton/ToolbarButton\"\nimport {ConversationSearch} from \"../ConversationSearch/ConversationSearch\"\nimport axios from \"axios\"\n\nimport \"./ConversationList.css\"\nimport {ConversationListItem} from \"../ConversationListItem/ConversationListItem\"\n\nexport const ConversationsList = (props: any) => {\n    const [conversations, setConversations] = useState([])\n    useEffect(() => {\n        getConversations()\n    })\n\n    const getConversations = () => {\n        axios.get(\"https://randomuser.me/api/?results=20\").then((response) => {\n            let newConversations = response.data.results.map((result: any) => {\n                return {\n                    photo: result.picture.large,\n                    name: `${result.name.first} ${result.name.last}`,\n                    text: \"Hello world! This is a long message that needs to be truncated.\",\n                }\n            })\n            // @ts-ignore\n            setConversations([...conversations, ...newConversations])\n        })\n    }\n\n\n    return (\n        <div className=\"conversation-list\">\n            <Toolbar\n                title=\"Messenger\"\n                leftItems={[<ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />]}\n                rightItems={[\n                    <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />,\n                ]}\n            />\n            <ConversationSearch />\n            {conversations.map((conversation: any) => (\n                <ConversationListItem key={conversation.name} data={conversation} />\n            ))}\n        </div>\n    )\n}\n","import React from \"react\"\nimport moment from \"moment\"\nimport \"./Message.css\"\n\nexport const Message = (props: any) => {\n    const {data, isMine, startsSequence, endsSequence, showTimestamp} = props\n\n    const friendlyTimestamp = moment(data.timestamp).format(\"LLLL\")\n    return (\n        <div\n            className={[\n                \"message\",\n                `${isMine ? \"mine\" : \"\"}`,\n                `${startsSequence ? \"start\" : \"\"}`,\n                `${endsSequence ? \"end\" : \"\"}`,\n            ].join(\" \")}\n        >\n            {showTimestamp && <div className=\"timestamp\">{friendlyTimestamp}</div>}\n\n            <div className=\"bubble-container\">\n                <div className=\"bubble\" title={friendlyTimestamp}>\n                    {data.message}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport \"./Compose.css\"\n\nexport const Compose = (props: any) => {\n    return (\n        <div className=\"compose\">\n            <input\n                type=\"text\"\n                className=\"compose-input\"\n                placeholder=\"Type a message, @name\"\n            />\n\n            {props.rightItems}\n        </div>\n    )\n}\n","import React, {useEffect, useState} from \"react\"\nimport {Toolbar} from \"../Toolbar/Toolbar\"\nimport {ToolbarButton} from \"../ToolbarButton/ToolbarButton\"\nimport {Message} from \"../Message/Message\"\nimport moment from \"moment\"\n\nimport \"./MessageList.css\"\nimport {Compose} from \"../Compose/Compose\"\n\nconst MY_USER_ID = \"apple\"\n\nexport const MessageList = (props: any) => {\n    const [messages, setMessages] = useState([])\n\n    useEffect(() => {\n        getMessages()\n    })\n\n    const getMessages = () => {\n        var tempMessages = [\n            {\n                id: 1,\n                author: \"apple\",\n                message:\n                    \"Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.\",\n                timestamp: new Date().getTime(),\n            },\n            {\n                id: 2,\n                author: \"orange\",\n                message:\n                    \"It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!\",\n                timestamp: new Date().getTime(),\n            },\n            {\n                id: 3,\n                author: \"orange\",\n                message:\n                    \"Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.\",\n                timestamp: new Date().getTime(),\n            },\n            {\n                id: 4,\n                author: \"apple\",\n                message:\n                    \"It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!\",\n                timestamp: new Date().getTime(),\n            },\n            {\n                id: 5,\n                author: \"apple\",\n                message:\n                    \"Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.\",\n                timestamp: new Date().getTime(),\n            },\n            {\n                id: 6,\n                author: \"apple\",\n                message:\n                    \"It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!\",\n                timestamp: new Date().getTime(),\n            },\n            {\n                id: 7,\n                author: \"orange\",\n                message:\n                    \"Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.\",\n                timestamp: new Date().getTime(),\n            },\n            {\n                id: 8,\n                author: \"orange\",\n                message:\n                    \"It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!\",\n                timestamp: new Date().getTime(),\n            },\n            {\n                id: 9,\n                author: \"apple\",\n                message:\n                    \"Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.\",\n                timestamp: new Date().getTime(),\n            },\n            {\n                id: 10,\n                author: \"orange\",\n                message:\n                    \"It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!\",\n                timestamp: new Date().getTime(),\n            },\n        ]\n        // @ts-ignore\n        setMessages([...messages, ...tempMessages])\n    }\n\n    const renderMessages = () => {\n        let i = 0\n        let messageCount = messages.length\n        let tempMessages = []\n\n        while (i < messageCount) {\n            let previous = messages[i - 1]\n            let current = messages[i]\n            let next = messages[i + 1]\n            // @ts-ignore\n            let isMine = current.author === MY_USER_ID\n            // @ts-ignore\n            let currentMoment = moment(current.timestamp)\n            let prevBySameAuthor = false\n            let nextBySameAuthor = false\n            let startsSequence = true\n            let endsSequence = true\n            let showTimestamp = true\n\n            if (previous) {\n                // @ts-ignore\n                let previousMoment = moment(previous.timestamp)\n                let previousDuration = moment.duration(\n                    currentMoment.diff(previousMoment),\n                )\n                // @ts-ignore\n                prevBySameAuthor = previous.author === current.author\n\n                if (prevBySameAuthor && previousDuration.as(\"hours\") < 1) {\n                    startsSequence = false\n                }\n\n                if (previousDuration.as(\"hours\") < 1) {\n                    showTimestamp = false\n                }\n            }\n\n            if (next) {\n                // @ts-ignore\n                let nextMoment = moment(next.timestamp)\n                let nextDuration = moment.duration(nextMoment.diff(currentMoment))\n                // @ts-ignore\n                nextBySameAuthor = next.author === current.author\n\n                if (nextBySameAuthor && nextDuration.as(\"hours\") < 1) {\n                    endsSequence = false\n                }\n            }\n\n            tempMessages.push(\n                <Message\n                    key={i}\n                    isMine={isMine}\n                    startsSequence={startsSequence}\n                    endsSequence={endsSequence}\n                    showTimestamp={showTimestamp}\n                    data={current}\n                />,\n            )\n\n            // Proceed to the next message.\n            i += 1\n        }\n\n        return tempMessages\n    }\n\n    return (\n        <div className=\"message-list\">\n            <Toolbar\n                title=\"Conversation Title\"\n                rightItems={[\n                    <ToolbarButton\n                        key=\"info\"\n                        icon=\"ion-ios-information-circle-outline\"\n                    />,\n                    <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n                    <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />,\n                ]}\n            />\n\n            <div className=\"message-list-container\">{renderMessages()}</div>\n\n            <Compose\n                rightItems={[\n                    <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n                    <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n                    <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n                    <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n                    <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n                    <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />,\n                ]}\n            />\n        </div>\n    )\n}\n","import React from \"react\"\nimport {ConversationsList} from \"../ConversationList/ConversationsList\"\nimport {MessageList} from \"../MessageList/MessageList\"\n\nimport \"./Messenger.css\"\n\nexport const Messenger = (props: any) => {\n    return (\n        <div className=\"messenger\">\n            {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n            {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n            <div className=\"scrollable sidebar\">\n                <ConversationsList />\n            </div>\n\n            <div className=\"scrollable content\">\n                <MessageList />\n            </div>\n        </div>\n    )\n}\n","export class ApiRoute {\n    static apiDomain = process.env.REACT_APP_API_BASEURL\n}\n\nexport class AuthRoutes {\n    static postRegister = \"/api/auth/register\"\n    static postLogin = \"/api/auth/login\"\n    static postRefreshToken = \"/api/auth/refresh-token\"\n    static getVerifyPhone = \"/api/auth/verify-phone\"\n}\n\nexport class ChatsRoutes {\n    static getChats = \"/api/chats\"\n    static postGroup = \"/api/chats/group\"\n    static postDirectChat = \"/api/chats/direct-chat\"\n    static postJoinGroup = \"/api/chats/group/join/{chatId}\"\n}\n\nexport class MessagesRoutes {\n    static getChatMessages = \"/api/messages/{chatId}\"\n    static postMessage = \"/api/messages\"\n    static putMessage = \"/api/messages\"\n    static deleteMessage = \"/api/messages/{messageId}\"\n}\n\nexport class UserRoutes {\n    static getUserById = \"/api/users/{userId}\"\n}\n","import axios, {AxiosInstance} from \"axios\"\nimport {ApiRoute, AuthRoutes} from \"../consts/Routes\"\nimport {RegisterCommand} from \"../types/Auth/Requests/RegisterCommand\"\nimport {LoginCommand} from \"../types/Auth/Requests/LoginCommand\"\nimport {RefreshTokenCommand} from \"../types/Auth/Requests/RefreshTokenCommand\"\n\nexport class AuthApi {\n    protected headers: {\n        \"Content-Type\": \"application/json\"\n    } = {\n        \"Content-Type\": \"application/json\",\n    }\n\n    protected apiConnector: AxiosInstance\n\n    public constructor() {\n        this.apiConnector = axios.create({headers: this.headers, baseURL: ApiRoute.apiDomain})\n    }\n\n    public async register(data: RegisterCommand) {\n        try {\n            // @ts-ignore\n            const res: {data: string} = await this.apiConnector.post(\n                AuthRoutes.postRegister,\n                {\n                    phoneNumber: data.phoneNumber,\n                    email: data.email,\n                    displayName: data.displayName,\n                    password: data.password,\n                    verificationMethod: data.verificationMethod,\n                    termsAccepted: data.termsAccepted,\n                },\n                {headers: this.headers},\n            )\n\n            return Promise.resolve(res.data)\n        } catch (error) {\n            if (error && error.response) {\n                let errorText = \"\"\n                switch (error.response.status) {\n                    case 401:\n                        errorText = \"Wrong login or password\"\n                        break\n                    case 403:\n                        errorText = \"Access denied\"\n                        break\n                    default:\n                        errorText = error.response.status\n                        break\n                }\n                console.log(\"One of the Error messages from Register Request: \", errorText)\n            }\n\n            return Promise.reject(error)\n        }\n    }\n\n    public async login(data: LoginCommand) {\n        try {\n            const res: {data: LoginCommand} = await this.apiConnector.post(\n                AuthRoutes.postLogin,\n                {\n                    email: data.email,\n                    password: data.password,\n                },\n                {headers: this.headers},\n            )\n            return Promise.resolve(res.data)\n        } catch (error) {\n            if (error && error.response) {\n                let errorText = \"\"\n                switch (error.response.status) {\n                    case 401:\n                        errorText = \"Wrong login or password\"\n                        break\n                    case 403:\n                        errorText = \"Access denied\"\n                        break\n                    default:\n                        errorText = error.response.status\n                        break\n                }\n                console.log(\"One of the Error messages from Register Request: \", errorText)\n            }\n            return Promise.reject(error)\n        }\n    }\n\n    public async verifyEmail(data: any) {\n    }\n\n    public async verifyPhone(data: any) {\n    }\n\n    public async refreshToken(data: RefreshTokenCommand) {\n        try {\n            // eslint-disable-next-line\n            const res: {data: string} = await this.apiConnector.post(AuthRoutes.postRefreshToken, {refreshTokenId: data.refreshTokenId}, {headers: this.headers})\n\n            return Promise.resolve()\n        } catch (error) {\n            if (error && error.response) {\n                let errorText = \"\"\n                switch (error.response.status) {\n                    case 401:\n                        errorText = \"Wrong login or password\"\n                        break\n                    case 403:\n                        errorText = \"Access denied\"\n                        break\n                    default:\n                        errorText = error.response.status\n                        break\n                }\n                console.log(\"One of the Error messages from Register Request: \", errorText)\n            }\n            return Promise.reject(error)\n        }\n    }\n\n    public async logout(data: any) {\n    }\n\n    public async logoutAll(data: any) {\n    }\n}\n","import {action, makeAutoObservable, observable} from \"mobx\"\nimport {AuthApi} from \"../api/AuthApi\"\nimport {RegisterCommand} from \"../types/Auth/Requests/RegisterCommand\"\n\nexport class AuthStore {\n    private registrationApi = new AuthApi()\n\n    @observable\n    private _message: String | null = null\n\n    @observable\n    private _success: Boolean = false\n\n    @observable\n    private _userId: String | null = null\n\n    @observable\n    private _login: String | null = null\n\n    @observable\n    private _isLogged: boolean = false\n\n    @action\n    public setMessage = (message: string) => {\n        this._message = message\n    }\n\n    @action\n    public setSuccess = (success: boolean) => {\n        this._success = success\n    }\n\n    @action\n    public setUserId = (userId: string) => {\n        this._userId = userId\n    }\n\n    public async registration(data: RegisterCommand) {\n        try {\n            //@ts-ignore\n            const {message, success, userId} = await this.registrationApi.register(data)\n            this.setMessage(message)\n            this.setSuccess(success)\n            this.setUserId(userId)\n            return Promise.resolve()\n        } catch (error) {\n            return Promise.reject(error)\n        }\n    }\n\n    public constructor() {\n        makeAutoObservable(this)\n    }\n}\n","import {VerificationMethod} from \"../Enums/VerificationMethod\";\n\nexport class RegisterCommand {\n  phoneNumber: string;\n  email: string;\n  displayName: string;\n  password: string;\n  verificationMethod: VerificationMethod;\n  termsAccepted: boolean;\n\n\n  constructor(phoneNumber: string,\n              email: string,\n              displayName: string,\n              password: string,\n              verificationMethod: VerificationMethod,\n              termsAccepted: boolean) {\n    this.phoneNumber = phoneNumber;\n    this.email = email;\n    this.displayName = displayName;\n    this.password = password;\n    this.verificationMethod = verificationMethod;\n    this.termsAccepted = termsAccepted;\n  }\n}\n","import React from \"react\"\nimport {observer} from \"mobx-react-lite\"\nimport {AuthStore} from \"../../stores/AuthStore\"\nimport styled from \"styled-components\"\nimport {VerificationMethod} from \"../../types/Auth/Enums/VerificationMethod\"\nimport {RegisterCommand} from \"../../types/Auth/Requests/RegisterCommand\"\n\nexport const Registration: React.FunctionComponent = observer(() => {\n    const authStore = new AuthStore()\n\n\n    const [phoneNumber, setPhoneNumber] = React.useState(\"\")\n    const [email, setEmail] = React.useState(\"\")\n    const [name, setName] = React.useState(\"\")\n    const [password, setPassword] = React.useState(\"\")\n    const [termsAccepted, setTermsAccepted] = React.useState(true)\n    const [verificationMethod, setVerificationMethod] = React.useState<VerificationMethod>(1)\n    console.log(verificationMethod, \"verification method\")\n\n    const handleFormSubmit = (event: any) => {\n        event.preventDefault()\n        setTermsAccepted(true)\n        console.log(verificationMethod, \"this is the value of verification method: 1 means by telephone, 2 means by e-mail\")\n        authStore.registration(new RegisterCommand(phoneNumber, email, name, password, verificationMethod, termsAccepted))\n    }\n\n    const handleSelectChange = (event: any) => {\n        if (event.target.value === \"phone\") {\n            setVerificationMethod(1)\n        } else if (event.target.value === \"email\") {\n            setVerificationMethod(2)\n        }\n\n    }\n\n    return (\n\n        <FormContainer onSubmit={handleFormSubmit}>\n            <FormWrapper>\n                <InputFormWrapper>\n                    <label>\n                        Phone Number:\n                        <InputWrapper type=\"text\" value={phoneNumber} onChange={(event) => setPhoneNumber(event.target.value)} placeholder={\"Enter your phone number\"} />\n                    </label>\n                </InputFormWrapper>\n\n                <InputFormWrapper>\n                    <label>\n                        Email:\n                        <InputWrapper type=\"text\" value={email} onChange={(event) => setEmail(event.target.value)} placeholder={\"Enter your E-MAIL\"} />\n                    </label>\n                </InputFormWrapper>\n\n                <InputFormWrapper>\n                    <label>\n                        Name:\n                        <InputWrapper type=\"text\" value={name} onChange={(event) => setName(event.target.value)} placeholder={\"Enter your name\"} />\n                    </label>\n                </InputFormWrapper>\n\n                <InputFormWrapper>\n                    <label>\n                        Password:\n                        <InputWrapper type=\"text\" value={password} onChange={(event) => setPassword(event.target.value)} placeholder={\"Enter your E-MAIL\"} />\n                    </label>\n                </InputFormWrapper>\n\n\n                <label>\n                    Authorization method:\n\n                    <select onChange={handleSelectChange}>\n                        <option value=\"phone\">Phone number</option>\n                        <option value=\"email\">E-Mail</option>\n                    </select>\n\n                </label>\n\n\n                <label>\n                    By clicking submit you are agreeing to the Terms and Conditions.\n                    <SubmitButton type=\"submit\" value=\"submit\" />\n                </label>\n            </FormWrapper>\n\n\n        </FormContainer>\n\n\n    )\n})\n\n\nconst FormContainer = styled(\"form\")`\n    height: 100vh;\n    width: 100vw;\n    font-family: 'Open Sans',sans-serif;\n    color: #fff;\n    background: linear-gradient(#141e30, #243b55);    \n`\n\nconst FormWrapper = styled(\"div\")`\n    width: 400px;\n    padding: 40px;\n    background: rgba(0,0,0,.5);\n    box-sizing: border-box;\n    box-shadow: 0 15px 25px rgba(0,0,0,.6);\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    \n`\n\nconst InputFormWrapper = styled(\"div\")`\n  width: 100%;\n  padding: 10px 0;\n  font-size: 16px;\n  color: #fff;\n  margin-bottom: 30px;\n  border: none;\n  outline: none;\n  background: transparent;\n    \n`\nconst InputWrapper = styled(\"input\")`\n  width: 100%;\n  padding: 10px 0;\n  font-size: 16px;\n  color: #fff;\n  margin-bottom: 30px;\n  border: none;\n  border-bottom: 1px solid #fff;\n  outline: none;\n  background: transparent;\n`\n\nconst SubmitButton = styled(\"input\")`\n    background: linear-gradient(#243B6B, #8951e9);\n    width: 100%;\n    height: 8.5%;\n    padding: 10px 20px;\n    color: #f1ecf2;\n    font-size: 16px;\n    text-decoration: none;\n    text-transform: uppercase;\n    overflow: hidden;\n    transition: 0.6s;\n    cursor: pointer;\n    margin-top: 40px;\n    letter-spacing: 2px;\n    border: 2px solid;\n    &:hover {\n    background: #243b55;\n    color: #fff;\n    border-radius: 5px;\n    }\n    \n`\n","import React from \"react\"\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport {Messenger} from \"../Messenger/Messenger\"\nimport {Registration} from \"../../pages/Registration/Registration\"\n\nexport default function App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={Messenger} />\n                    <Route exact path=\"/registration\" component={Registration} />\n\n                </Switch>\n            </BrowserRouter>\n\n        </div>\n    )\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./assets/index.css\"\nimport {BrowserRouter} from \"react-router-dom\"\nimport App from \"./components/App/App\"\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\"),\n)\n\n\n"],"sourceRoot":""}